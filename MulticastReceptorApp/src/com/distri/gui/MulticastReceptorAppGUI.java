/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.distri.gui;

import com.distri.communication.multicast.MulticastManager;
import com.distri.communication.multicast.MulticastManagerCallerInterface;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author eduar
 */
public class MulticastReceptorAppGUI extends javax.swing.JFrame implements MulticastManagerCallerInterface {

    MulticastManager multicastManager;
    String fileName;
    int numberDatagrams;
    int lastByteLength;
    ArrayList<byte[]> dataReceived;
    boolean storeData;
    
    int datagramCounter;
    
    /**
     * Creates new form MulticastReceptorAppGUI
     */
    public MulticastReceptorAppGUI() {
        initComponents();
        this.multicastManager = null;
        this.storeData = false;
        this.fileName = "DefaultFileName";
        this.numberDatagrams = 0;
        this.lastByteLength = 0;
        this.datagramCounter = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ipTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP Address:");

        jLabel2.setText("Port:");

        ipTextField.setText("224.0.0.1");

        portTextField.setText("9091");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(portTextField)
                            .addComponent(ipTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)))
                    .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(64, 64, 64)
                .addComponent(connectButton)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        if(initializeMulticastManager()) {
            connectButton.setEnabled(false);
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MulticastReceptorAppGUI().setVisible(true);
            }
        });
    }

    public boolean initializeMulticastManager() {
        try {
            if(multicastManager == null) {
                multicastManager = new MulticastManager(ipTextField.getText(), 
                        Integer.parseInt(portTextField.getText()), this);
                return true;
            }
        }catch (Exception ex) {
            errorOnMulticastManager(ex);
        }
        return false;
    }
    
    private void makeFile() {
        try {
            String path = System.getProperty("user.dir") + "/../WebServiceRESTMulticast/src/main/java/com/distri/webservicerestmulticast/resources";
            FileOutputStream fileOutputStream = new FileOutputStream(new File(path + "\\" + fileName));
            for (int i = 0; i < dataReceived.size()-1; i++) {
                fileOutputStream.write(dataReceived.get(i), 0, dataReceived.get(i).length);
            }
            int last = dataReceived.size()-1;
            fileOutputStream.write(dataReceived.get(last), 0, lastByteLength);
            fileOutputStream.close();
            System.out.println("File " + fileName + " Received Successfully!");
            this.fileName = "DefaultFileName";
            this.lastByteLength = 0;
        }catch (Exception ex) {
            errorOnMulticastManager(ex);
        }
    }
    
    @Override
    public void dataReceived(String sourceIpAddressOrHost, int sourcePort, byte[] data) {
        if(!storeData) {
            //System.out.println("First Datagram Received");
            String controlString = new String(data);
            String[] controlData = controlString.split("/");
            if(controlData[0].equals("P0")) {
                this.storeData = true;
                this.fileName = controlData[1];
                this.numberDatagrams = Integer.parseInt(controlData[2]);
                this.lastByteLength = Integer.parseInt(controlData[3]);
                this.dataReceived = new ArrayList<>();
            }
        }else {
            dataReceived.add(Arrays.copyOf(data, data.length));
            datagramCounter++;
            if(datagramCounter >= numberDatagrams) {
                this.makeFile();
                this.storeData = false;
                this.numberDatagrams = 0;
                this.datagramCounter = 0;
            }
        }
    }

    @Override
    public void errorOnMulticastManager(Exception ex) {
        System.err.println(ex);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField portTextField;
    // End of variables declaration//GEN-END:variables
}
