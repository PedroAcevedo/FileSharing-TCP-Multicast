/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.distri.gui;

import com.distri.communication.multicast.MulticastManager;
import com.distri.communication.multicast.MulticastManagerCallerInterface;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetAddress;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author eduar
 */
public class MulticastReceptorAppGUI extends javax.swing.JFrame implements MulticastManagerCallerInterface {

    public static int MTU;
    
    MulticastManager multicastManager;
    ArrayList<String> fileNames;
    ArrayList<Integer> numberDatagrams;
    ArrayList<Integer> lastByteLength;
    ArrayList<ArrayList<byte[]>> dataReceived;
    ArrayList<Integer> datagramCounters;
    boolean isReported = false;
    HashMap<String, fileDescriptor> fileDescriptors;
    /**
     * Creates new form MulticastReceptorAppGUI
     */
    public MulticastReceptorAppGUI() {
        initComponents();
        configMTU();
        this.multicastManager = null;
        this.fileNames = new ArrayList<>();
        this.numberDatagrams = new ArrayList<>();
        this.lastByteLength = new ArrayList<>();
        this.dataReceived = new ArrayList<>();
        this.datagramCounters = new ArrayList<>();
        this.fileDescriptors = new HashMap();
    }

    private void configMTU() {
        try {
            MulticastReceptorAppGUI.MTU = Integer.parseInt(
                    (new BufferedReader(new FileReader(
                            Paths.get("src/com/distri/resources/config/MTU.config").toAbsolutePath().toString())
                    )).readLine()
            );
        }catch (Exception ex) {
            System.err.println(ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ipTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP Address:");

        jLabel2.setText("Port:");

        ipTextField.setText("224.0.0.1");

        portTextField.setText("9091");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(portTextField)
                            .addComponent(ipTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)))
                    .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(64, 64, 64)
                .addComponent(connectButton)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        if(initializeMulticastManager()) {
            connectButton.setEnabled(false);
            this.setVisible(false);
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MulticastReceptorAppGUI().setVisible(true);
            }
        });
    }

    public boolean initializeMulticastManager() {
        try {
            if(multicastManager == null) {
                multicastManager = new MulticastManager(ipTextField.getText(), 
                        Integer.parseInt(portTextField.getText()), this, MulticastReceptorAppGUI.MTU);
                //multicastManager.sendData(("HI/" + InetAddress.getLocalHost().getHostAddress() + "/").getBytes());
                return true;
            }
        }catch (Exception ex) {
            errorOnMulticastManager(ex);
        }
        return false;
    }
    private void makeFile(ArrayList<byte[]> data, String fileName, int lastBytesCount){
        FileOutputStream fileOutputStream = null;
        try {
            String path = System.getProperty("user.dir") + "/../WebServiceRESTMulticast/src/main/java/com/distri/webservicerestmulticast/resources";
            fileOutputStream = new FileOutputStream(new File(path + "\\" + fileName));
            for (int i = 0; i < data.size()-1; i++) {
                fileOutputStream.write(data.get(i));
            }
            fileOutputStream.write(data.get(data.size()-1), 0, lastBytesCount);
            fileOutputStream.close();
            fileOutputStream.close();
            System.out.println("file : " + fileName + " Successfully written!!");
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MulticastReceptorAppGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void makeFile(int fileIndex) {
        try {
            String path = System.getProperty("user.dir") + "/../WebServiceRESTMulticast/src/main/java/com/distri/webservicerestmulticast/resources";
            FileOutputStream fileOutputStream = new FileOutputStream(new File(path + "\\" + fileNames.get(fileIndex)));
            for (int i = 0; i < dataReceived.get(fileIndex).size()-1; i++) {
                
                fileOutputStream.write(dataReceived.get(fileIndex).get(i),0, dataReceived.get(fileIndex).get(i).length - 100);
            }
            int last = dataReceived.get(fileIndex).size()-1;
            fileOutputStream.write(dataReceived.get(fileIndex).get(last), 100, lastByteLength.get(fileIndex) - 100);
            fileOutputStream.close();
            System.out.println("File " + fileNames.get(fileIndex) + " Received Successfully!");
            fileNames.remove(fileIndex);
            numberDatagrams.remove(fileIndex);
            lastByteLength.remove(fileIndex);
            dataReceived.remove(fileIndex);
            datagramCounters.remove(fileIndex);
        }catch (Exception ex) {
            errorOnMulticastManager(ex);
        }
    }
    
    @Override
    public void dataReceived(String sourceIpAddressOrHost, int sourcePort, byte[] data) {
        
        String controlString = new String(data);
        String[] controlData = controlString.split("/");
        switch(controlData[0]) {
            case "NEW":
                System.out.println("receiving file...");
                fileDescriptors.put(controlData[1], new fileDescriptor(controlData[1]));
                break;
            case "EOF":
                fileDescriptor f = fileDescriptors.remove(controlData[1]);
                //long time = System.currentTimeMillis();
                makeFile(f.dataList, f.fileName,Integer.parseInt(controlData[2]));
                //System.out.println(f.fileName + " : " + (System.currentTimeMillis()-time));
                break;
            default:
                if(fileDescriptors.containsKey(controlData[0])){
                    fileDescriptors.get(controlData[0]).addData(Arrays.copyOfRange(data,100,Math.min(MTU, data.length)));
                }
        }
    }
    
    @Override
    public void errorOnMulticastManager(Exception ex) {
        System.err.println(ex.getMessage());
        //ex.printStackTrace();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField portTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void sendString(String data) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    class fileDescriptor{
        //int lastBytesCount;
        ArrayList<byte[]> dataList;
        String fileName;
        
        public fileDescriptor(String fileName){
            this.dataList = new ArrayList();
            this.fileName = fileName;
            //this.lastBytesCount = lastBytesCount;
        }
        
        public void addData(byte[] data){
            this.dataList.add(data);
        }
    }
}
